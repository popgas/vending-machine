name: "Build & Release"

on:
  push:
    branches:
      - main

jobs:
  build:
    name: Build & Release
    runs-on: ubuntu-24.04

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: Set Up Java
        uses: actions/setup-java@v3.12.0
        with:
          distribution: 'oracle'
          java-version: '17'

      - name: Build APK
        run: |
          docker run --rm --platform linux/arm64 -v ${{ github.workspace }}:/workspace -w /workspace \
          ubuntu:22.04 /bin/bash -c "
          add-apt-repository universe &&
          apt-get update -y &&
          apt-get install -y ninja-build \ 
              libgtk-3-dev \
              libgstreamer1.0-dev \ 
              libgstreamer-plugins-base1.0-dev \
              curl \
              git \
              unzip \
              xz-utils \
              zip \
              libglu1-mesa \
              clang \
              cmake \
              git \
              pkg-config \
              liblzma-dev \
              libstdc++-12-dev \
          && wget https://storage.googleapis.com/flutter_infra_release/releases/stable/linux/flutter_linux_3.29.0-stable.tar.xz
          && tar -xf ./flutter_linux_3.29.0-stable.tar.xz -C ~/development/
          && export PATH="~/development/flutter/bin:$PATH"
          && flutter pub get
          && flutter build linux --release --target-platform=linux-arm64
          "

      - name: Compress Archives
        run: |
          cd build
          tar -czf linux.tar.gz linux

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Releases
          path: |
            build/linux.tar.gz

      - name: Extract version from pubspec.yaml
        id: extract_version
        run: |
          version=$(grep '^version: ' pubspec.yaml | cut -d ' ' -f 2 | tr -d '\r')
          echo "VERSION=$version" >> $GITHUB_ENV

      - name: Check if Tag Exists
        id: check_tag
        run: |
          if git rev-parse "v${{ env.VERSION }}" >/dev/null 2>&1; then
            echo "TAG_EXISTS=true" >> $GITHUB_ENV
          else
            echo "TAG_EXISTS=false" >> $GITHUB_ENV
          fi

      - name: Modify Tag
        if: env.TAG_EXISTS == 'true'
        id: modify_tag
        run: |
          new_version="${{ env.VERSION }}-build-${{ github.run_number }}"
          echo "VERSION=$new_version" >> $GITHUB_ENV

      - name: Create Release
        uses: ncipollo/release-action@v1
        with:
          artifacts: "build/linux.tar.gz"
          tag: v${{ env.VERSION }}
          token: ${{ secrets.TOKEN }}
